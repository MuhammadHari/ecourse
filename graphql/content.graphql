enum ContentType {
  PDF @enum(value: "pdf")
  VIDEO @enum(value: "video")
}

type Content {
  id: ID!
  sectionId: String!
  classroomId: String!
  title: String!
  description: String!
  type: ContentType!
  duration: Float!
  pageNumber: Float!
  progress: Progress
  mediaContent: String!
  thumbnail: String!
  createdAt: Date!
  updatedAt: Date
  user: User! @with(relation: "User")
  section: Section @with(relation: "Section")
  classroom: ClassRoom @with(relation: "Section")
}

extend type Mutation {
  content(
    section_id: String! @rules(apply: ["required", "exists:sections,id"])
    classroom_id: String! @rules(apply: ["required", "exists:classrooms,id"])
    title: String! @rules(apply: ["required"])
    description: String! @rules(apply: ["required"])
    content: Upload!
      @rules(apply: ["required", "file", "mimetypes:application/pdf,video/*"])
  ): Content!
    @field(resolver: "App\\GraphQL\\ContentResolver@create")
    @inject(name: "user_id", context: "user.id")
    @guard
}

extend type Query {
  contents(
    classroomId: ID! @where(key: "classroom_id")
    sectionId: ID @where(key: "section_id")
  ): [Content!]! @orderBy(column: "created_at", direction: DESC) @paginate
  contentByUser: [Content!]! @whereAuth(relation: "user") @paginate
  contentBySection(id: String! @where(key: "section_id")): [Content!]! @all
  content(id: ID! @eq) : Content @find
}
